{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","giftexpertapp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","currentCategories","console","log","type","value","onChange","target","className","GifGridItem","id","title","url","src","alt","getGifs","category","a","searchBy","encodeURI","fetch","req","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","gif","setTimeout","useFetchGifts","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBADhB,IAD0B,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,uBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAc,SAAAS,GAAiB,OAAKP,GAAL,mBAAoBO,OACnDN,EAAc,KAEdO,QAAQC,IAAI,yBAKhB,UACI,uBACIC,KAAK,OACLC,MAAOX,EACPY,SAnBc,SAACT,GACvBF,EAAcE,EAAEU,OAAOF,QAmBfG,UAAU,6BACd,mBAAGA,UAAU,cAAb,SAA4Bd,IAC5B,oBAAIc,UAAU,cAAd,8B,QC7BCC,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAErC,OADAV,QAAQC,IAAIO,EAAIC,EAAOC,GAEnB,sBAAKJ,UAAU,OAAf,UACI,qBAAKK,IAAKD,EAAKE,IAAKH,IACpB,6BAAKA,Q,uBCLJI,EAAO,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,6DACbC,EAAWC,UAAUH,GACrBJ,EAFa,0FAE4EM,EAF5E,qBAGDE,MAAMR,GAHL,cAGbS,EAHa,gBAIIA,EAAIC,OAJR,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CAEHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAKc,EAAIC,OAAOC,iBAAiBhB,QAVtB,kBAcbY,GAda,4CAAH,sDCQPK,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECLZ,SAACA,GAAc,IAAD,EAEbvB,mBAAS,CAC/B8B,KAAM,GACNO,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAuBvC,OAhBAC,qBAAU,WACNlB,EAAQC,GACHkB,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLT,KAAMY,EACNL,SAAS,MAEd,UAEZ,CAACd,IAMGe,EDhBwBM,CAAcrB,GAA/BmB,EAFuB,EAE7BZ,KAAWO,EAFkB,EAElBA,QAEnB,OACI,qCACI,oBAAItB,UAAU,cAAd,SAA6BQ,IAC7B,mBAAGR,UAAWsB,EAAU,kDAAoD,cAA5E,SACKA,GAAO,wBAAqBd,EAArB,SAEZ,qBAAKR,UAAU,YAAf,SAEQ2B,EAAIV,KAAI,SAAAU,GAAG,OACP,cAAE,EAAF,eACQA,GADWA,EAAIzB,aEjBlC4B,EAAe,WACxB,IAD8B,EAGM7C,mBAFd,CAAC,KADO,mBAGvB8C,EAHuB,KAGX/C,EAHW,KAI9B,OACI,qCACI,oBAAIgB,UAAU,mBAAd,2BACA,mBAAGA,UAAU,mBAAb,kCACA,uBACA,cAAC,EAAD,CAAahB,cAAeA,IAC5B,6BAEQ+C,EAAWd,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCNlBwB,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCEdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.358d3d4d.chunk.js","sourcesContent":["import { useState } from \"react\"\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    const newCategory = ''\r\n    const [inputValue, setInputValue] = useState(newCategory)\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(currentCategories => [inputValue, ...currentCategories])\r\n            setInputValue('')\r\n        } else {\r\n            console.log('The field is invalid')\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n                className=\"search-style text-center\" />\r\n            <p className=\"text-center\">{inputValue}</p>\r\n            <h1 className=\"text-center\">\r\n                ADD CATEGORY\r\n            </h1>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\n//validations\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const GifGridItem = ({ id, title, url }) => {\r\n    console.log(id, title, url)\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt={title} />\r\n            <h2>{title}</h2>\r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async (category) => {\r\n    const searchBy = encodeURI(category)\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=ob3PqTmldjjmziPfCSBvbo1bhgtVgMdv&q=${searchBy}&limit=6`;\r\n    const req = await fetch(url);\r\n    const { data } = await req.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n\r\n        }\r\n    })\r\n   return gifs\r\n}\r\n","\r\n//import { useState, useEffect } from \"react\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n//import { getGifs } from \"../helpers/getGifs\";\r\n\r\nimport { useFetchGifts } from \"../hooks/useFetchGifs\"\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data: gif, loading } = useFetchGifts(category)\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"text-center\">{category}</h3>\r\n            <p className={loading ? 'show-loader animate__animated animate__bounceIn' : 'hide-loader'}>\r\n                {loading && `Search Gif of ${category}...`}\r\n            </p>\r\n            <div className=\"card-grid\">\r\n                {\r\n                    gif.map(gif => (\r\n                        < GifGridItem key={gif.id}\r\n                            {...gif} />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\nexport const useFetchGifts = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(gif => {\r\n                setTimeout(()=>{\r\n                    setState({\r\n                        data: gif,\r\n                        loading: false,\r\n                    });\r\n                }, 3000)\r\n            })\r\n    }, [category])\r\n\r\n    // setTimeout(() => {\r\n    //     setState({ data: [1, 2, 3, 4, 5, 6, 7, 8], loading: false })\r\n    // }, 3000)\r\n\r\n    return state\r\n\r\n\r\n}","import React, { useState } from \"react\"\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n    const categoriesIni = [''];\r\n\r\n    const [categories, setCategories] = useState(categoriesIni)\r\n    return (\r\n        <>\r\n            <h1 className=\"text-center my-0\">GiftExpertApp</h1>\r\n            <p className=\"text-center my-0\">This is REACT course</p>\r\n            <hr />\r\n            <AddCategory setCategories={setCategories} />\r\n            <ol>\r\n                {\r\n                    categories.map((category) => (\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { GifExpertApp } from './giftexpertapp';\r\n\r\nimport './index.css';\r\nimport 'animate.css'\r\n\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GifExpertApp />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}